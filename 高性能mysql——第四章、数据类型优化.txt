选择优化的数据类型


1. 选择优化的数据结构
	一般情况下尽量使用正确的数据类型中最小的，更小的数据类型通常更快，但也要确保没有低估需要存储值的范围
	使用简单的数据类型，使用MySQL内建的类型代替字符串来存储日期时间
	尽量不适用Null，NUll列使得索引复杂，占用更大的存储空间


2. 整数类型
	TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT
	INT(1)和INT(10)存储空间是一样的，只是显示的字符个数不同


3. 实数类型
	FLOAT、DOUBLE支持标准浮点近似运算
	DECIMAL用于存储精确小数，在MySQL 5.0以上版本，DECIMAL支持精确运算
	DECIMAL列可以指定小数点前后允许的最大位数，每四个字节存储9个数字
	MySQL 5.0以上版本DECIMAL最多支持65个数字
	浮点型数据在存储同样范围的值会比DECIMAL使用更少的空间
	尽量只在对小数部分进行精确计算时使用DECIMAL类型


4. 字符串类型
VARCHAR
	VARCHAR用于存储可变长字符串，长度可以指定为0到65535之间的值，它比定长字符串更节省空间，它只使用必要的空间，如果表使用ROW_FORMAT=FIXED，则每一行会定长存储
	VARCHAR需要一到两个字节来记录字符串长度，列的最大长度小于255字节，则用1个字节，反之2个字节
	这几种情况适合用VARCHAR类型：字符串列的最大长度远大于平均长度；列更新少；使用了复杂的字符集
	MySQL 5.0以上版本在存储检索时会保留末尾的空格


CHAR
	CHAR用于存储定长字符串，长度可以为从0到255的任何值，当保存CHAR值时，在它们的右边填充空格以达到指定的长度，当检索到CHAR值时，尾部的空格被删除掉。在存储或检索过程中不进行大小写转换
	CHAR适合存储较短的字符串或者平均长度差不多


BLOB/TEXT
BLOB和TEXT都是为了存储很大的数据而设计的字符串数据类型，分别采用二进制和字符方式存储
MySQL对BLOB和TEXT的排序与其他类型不同，它只对每个列的最前max_sort_lehgth字节进行排序，可以使用ORDER BY SUBSTRING(column,length)


ENUM
	使用枚举代替字符串，将一些不重复的字符串定义成集合
	MySQL将每个枚举值以数字-字符串形式保存在.frm文件中，并且枚举值的排序是按照存储的数字来排序的，不是按照字符串，如果想按照字符串排序，可以使用ORDER BY FIELD()
	枚举的缺点是字符串列表是固定的，如果想增加就要用 ALTER TABLE
	转换列为枚举型有一个好处是可以减小表的大小


时间和日期类型
DATATIME
	将时间日期封装为YYYYMMDDHHMMSS，使用八个字节存储

TIMESTAMP
	返回从1970年1月1日午夜到现在的秒数，只使用四个字节存储
	可用FROM_UNIXTIME()转换到日期，可用UNIX_TIMESTAMP()转换成Unix时间
	时间与时区相关


位数据类型
BIT
	在一列中存储一个或者多个布尔值(11010101)，BIT(1)表示定义一个包含单个位的字段
	MySQL将BIT当成字符串来处理，而不是数字
	在文本上下文检索时，会处理成ascii码对应的字符，在数字上下文则处理成对应的数字
	尽可能避免使用BIT类型

SET
	如果需要保存很多布尔值，可以考虑使用集合，缺点是代价很高

在整数列上按位操作
	将一个数字包装成一系列位，比如8个位(01101001)